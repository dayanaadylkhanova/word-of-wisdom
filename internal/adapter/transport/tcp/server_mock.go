// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=./server_mock.go -package=tcp
//

// Package tcp is a generated GoMock package.
package tcp

import (
	reflect "reflect"

	entity "github.com/dayanaadylkhanova/word-of-wisdom/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPoW is a mock of PoW interface.
type MockPoW struct {
	ctrl     *gomock.Controller
	recorder *MockPoWMockRecorder
	isgomock struct{}
}

// MockPoWMockRecorder is the mock recorder for MockPoW.
type MockPoWMockRecorder struct {
	mock *MockPoW
}

// NewMockPoW creates a new mock instance.
func NewMockPoW(ctrl *gomock.Controller) *MockPoW {
	mock := &MockPoW{ctrl: ctrl}
	mock.recorder = &MockPoWMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoW) EXPECT() *MockPoWMockRecorder {
	return m.recorder
}

// NewChallenge mocks base method.
func (m *MockPoW) NewChallenge(difficulty int, ttlSeconds int64) (entity.Challenge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewChallenge", difficulty, ttlSeconds)
	ret0, _ := ret[0].(entity.Challenge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewChallenge indicates an expected call of NewChallenge.
func (mr *MockPoWMockRecorder) NewChallenge(difficulty, ttlSeconds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewChallenge", reflect.TypeOf((*MockPoW)(nil).NewChallenge), difficulty, ttlSeconds)
}

// Verify mocks base method.
func (m *MockPoW) Verify(ch entity.Challenge, sol entity.Solution) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", ch, sol)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockPoWMockRecorder) Verify(ch, sol any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockPoW)(nil).Verify), ch, sol)
}

// MockQuote is a mock of Quote interface.
type MockQuote struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteMockRecorder
	isgomock struct{}
}

// MockQuoteMockRecorder is the mock recorder for MockQuote.
type MockQuoteMockRecorder struct {
	mock *MockQuote
}

// NewMockQuote creates a new mock instance.
func NewMockQuote(ctrl *gomock.Controller) *MockQuote {
	mock := &MockQuote{ctrl: ctrl}
	mock.recorder = &MockQuoteMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuote) EXPECT() *MockQuoteMockRecorder {
	return m.recorder
}

// Random mocks base method.
func (m *MockQuote) Random() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Random")
	ret0, _ := ret[0].(string)
	return ret0
}

// Random indicates an expected call of Random.
func (mr *MockQuoteMockRecorder) Random() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Random", reflect.TypeOf((*MockQuote)(nil).Random))
}
